// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raftgrp.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// message
type Message struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_raftgrp_e1125f01542d7341, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// FIXME: use stream to send this
type SendRequest struct {
	GroupId              int64      `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Messages             []*Message `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SendRequest) Reset()         { *m = SendRequest{} }
func (m *SendRequest) String() string { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()    {}
func (*SendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_raftgrp_e1125f01542d7341, []int{1}
}
func (m *SendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRequest.Unmarshal(m, b)
}
func (m *SendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRequest.Marshal(b, m, deterministic)
}
func (dst *SendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRequest.Merge(dst, src)
}
func (m *SendRequest) XXX_Size() int {
	return xxx_messageInfo_SendRequest.Size(m)
}
func (m *SendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendRequest proto.InternalMessageInfo

func (m *SendRequest) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *SendRequest) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type SendReply struct {
	Ok                   string   `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendReply) Reset()         { *m = SendReply{} }
func (m *SendReply) String() string { return proto.CompactTextString(m) }
func (*SendReply) ProtoMessage()    {}
func (*SendReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_raftgrp_e1125f01542d7341, []int{2}
}
func (m *SendReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendReply.Unmarshal(m, b)
}
func (m *SendReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendReply.Marshal(b, m, deterministic)
}
func (dst *SendReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendReply.Merge(dst, src)
}
func (m *SendReply) XXX_Size() int {
	return xxx_messageInfo_SendReply.Size(m)
}
func (m *SendReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendReply proto.InternalMessageInfo

func (m *SendReply) GetOk() string {
	if m != nil {
		return m.Ok
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "proto.Message")
	proto.RegisterType((*SendRequest)(nil), "proto.SendRequest")
	proto.RegisterType((*SendReply)(nil), "proto.SendReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftGrouperClient is the client API for RaftGrouper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftGrouperClient interface {
	// Sends a raft message to peer
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error)
}

type raftGrouperClient struct {
	cc *grpc.ClientConn
}

func NewRaftGrouperClient(cc *grpc.ClientConn) RaftGrouperClient {
	return &raftGrouperClient{cc}
}

func (c *raftGrouperClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := c.cc.Invoke(ctx, "/proto.RaftGrouper/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftGrouperServer is the server API for RaftGrouper service.
type RaftGrouperServer interface {
	// Sends a raft message to peer
	Send(context.Context, *SendRequest) (*SendReply, error)
}

func RegisterRaftGrouperServer(s *grpc.Server, srv RaftGrouperServer) {
	s.RegisterService(&_RaftGrouper_serviceDesc, srv)
}

func _RaftGrouper_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftGrouperServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RaftGrouper/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftGrouperServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftGrouper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RaftGrouper",
	HandlerType: (*RaftGrouperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _RaftGrouper_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raftgrp.proto",
}

func init() { proto.RegisterFile("raftgrp.proto", fileDescriptor_raftgrp_e1125f01542d7341) }

var fileDescriptor_raftgrp_e1125f01542d7341 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4a, 0x4c, 0x2b,
	0x49, 0x2f, 0x2a, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xca, 0x5c,
	0xec, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0x05, 0x89, 0x95, 0x39,
	0xf9, 0x89, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x30, 0xae, 0x52, 0x08, 0x17, 0x77,
	0x70, 0x6a, 0x5e, 0x4a, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x24, 0x17, 0x47, 0x7a,
	0x51, 0x7e, 0x69, 0x41, 0x7c, 0x26, 0x44, 0x25, 0x73, 0x10, 0x3b, 0x98, 0xef, 0x99, 0x22, 0xa4,
	0xc5, 0xc5, 0x91, 0x0b, 0x31, 0xae, 0x58, 0x82, 0x49, 0x81, 0x59, 0x83, 0xdb, 0x88, 0x0f, 0x62,
	0x9f, 0x1e, 0xd4, 0x96, 0x20, 0xb8, 0xbc, 0x92, 0x34, 0x17, 0x27, 0xc4, 0xd4, 0x82, 0x9c, 0x4a,
	0x21, 0x3e, 0x2e, 0xa6, 0xfc, 0x6c, 0xb0, 0x69, 0x9c, 0x41, 0x4c, 0xf9, 0xd9, 0x46, 0xb6, 0x5c,
	0xdc, 0x41, 0x89, 0x69, 0x25, 0xee, 0x20, 0x73, 0x53, 0x8b, 0x84, 0xf4, 0xb8, 0x58, 0x40, 0x6a,
	0x85, 0x84, 0xa0, 0xa6, 0x21, 0x39, 0x47, 0x4a, 0x00, 0x45, 0xac, 0x20, 0xa7, 0x52, 0x89, 0x21,
	0x89, 0x0d, 0x2c, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x79, 0x8c, 0x2f, 0xe3, 0xf5, 0x00,
	0x00, 0x00,
}
